defmodule Crypto do
	import Bitwise
	require Bitwise
	defstruct in_counter: 0, out_counter: 0, using_alt: false, key3: [], key4: []

	@maxCounter bsl(1, 16)
	@key1 [
            0x9D, 0x90, 0x83, 0x8A, 0xD1, 0x8C, 0xE7, 0xF6, 0x25, 0x28, 0xEB, 0x82, 0x99, 0x64, 0x8F, 0x2E,
            0x2D, 0x40, 0xD3, 0xFA, 0xE1, 0xBC, 0xB7, 0xE6, 0xB5, 0xD8, 0x3B, 0xF2, 0xA9, 0x94, 0x5F, 0x1E, 
            0xBD, 0xF0, 0x23, 0x6A, 0xF1, 0xEC, 0x87, 0xD6, 0x45, 0x88, 0x8B, 0x62, 0xB9, 0xC4, 0x2F, 0x0E, 
            0x4D, 0xA0, 0x73, 0xDA, 0x01, 0x1C, 0x57, 0xC6, 0xD5, 0x38, 0xDB, 0xD2, 0xC9, 0xF4, 0xFF, 0xFE, 
            0xDD, 0x50, 0xC3, 0x4A, 0x11, 0x4C, 0x27, 0xB6, 0x65, 0xE8, 0x2B, 0x42, 0xD9, 0x24, 0xCF, 0xEE, 
            0x6D, 0x00, 0x13, 0xBA, 0x21, 0x7C, 0xF7, 0xA6, 0xF5, 0x98, 0x7B, 0xB2, 0xE9, 0x54, 0x9F, 0xDE, 
            0xFD, 0xB0, 0x63, 0x2A, 0x31, 0xAC, 0xC7, 0x96, 0x85, 0x48, 0xCB, 0x22, 0xF9, 0x84, 0x6F, 0xCE, 
            0x8D, 0x60, 0xB3, 0x9A, 0x41, 0xDC, 0x97, 0x86, 0x15, 0xF8, 0x1B, 0x92, 0x09, 0xB4, 0x3F, 0xBE, 
            0x1D, 0x10, 0x03, 0x0A, 0x51, 0x0C, 0x67, 0x76, 0xA5, 0xA8, 0x6B, 0x02, 0x19, 0xE4, 0x0F, 0xAE, 
            0xAD, 0xC0, 0x53, 0x7A, 0x61, 0x3C, 0x37, 0x66, 0x35, 0x58, 0xBB, 0x72, 0x29, 0x14, 0xDF, 0x9E, 
            0x3D, 0x70, 0xA3, 0xEA, 0x71, 0x6C, 0x07, 0x56, 0xC5, 0x08, 0x0B, 0xE2, 0x39, 0x44, 0xAF, 0x8E, 
            0xCD, 0x20, 0xF3, 0x5A, 0x81, 0x9C, 0xD7, 0x46, 0x55, 0xB8, 0x5B, 0x52, 0x49, 0x74, 0x7F, 0x7E, 
            0x5D, 0xD0, 0x43, 0xCA, 0x91, 0xCC, 0xA7, 0x36, 0xE5, 0x68, 0xAB, 0xC2, 0x59, 0xA4, 0x4F, 0x6E, 
            0xED, 0x80, 0x93, 0x3A, 0xA1, 0xFC, 0x77, 0x26, 0x75, 0x18, 0xFB, 0x32, 0x69, 0xD4, 0x1F, 0x5E, 
            0x7D, 0x30, 0xE3, 0xAA, 0xB1, 0x2C, 0x47, 0x16, 0x05, 0xC8, 0x4B, 0xA2, 0x79, 0x04, 0xEF, 0x4E, 
            0x0D, 0xE0, 0x33, 0x1A, 0xC1, 0x5C, 0x17, 0x06, 0x95, 0x78, 0x9B, 0x12, 0x89, 0x34, 0xBF, 0x3E
      ]
      @key2 [  
         0x62, 0x4F, 0xE8, 0x15, 0xDE, 0xEB, 0x04, 0x91, 0x1A, 0xC7, 0xE0, 0x4D, 0x16, 0xE3, 0x7C, 0x49,
         0xD2, 0x3F, 0xD8, 0x85, 0x4E, 0xDB, 0xF4, 0x01, 0x8A, 0xB7, 0xD0, 0xBD, 0x86, 0xD3, 0x6C, 0xB9,
         0x42, 0x2F, 0xC8, 0xF5, 0xBE, 0xCB, 0xE4, 0x71, 0xFA, 0xA7, 0xC0, 0x2D, 0xF6, 0xC3, 0x5C, 0x29,
         0xB2, 0x1F, 0xB8, 0x65, 0x2E, 0xBB, 0xD4, 0xE1, 0x6A, 0x97, 0xB0, 0x9D, 0x66, 0xB3, 0x4C, 0x99,
         0x22, 0x0F, 0xA8, 0xD5, 0x9E, 0xAB, 0xC4, 0x51, 0xDA, 0x87, 0xA0, 0x0D, 0xD6, 0xA3, 0x3C, 0x09,
         0x92, 0xFF, 0x98, 0x45, 0x0E, 0x9B, 0xB4, 0xC1, 0x4A, 0x77, 0x90, 0x7D, 0x46, 0x93, 0x2C, 0x79,
         0x02, 0xEF, 0x88, 0xB5, 0x7E, 0x8B, 0xA4, 0x31, 0xBA, 0x67, 0x80, 0xED, 0xB6, 0x83, 0x1C, 0xE9,
         0x72, 0xDF, 0x78, 0x25, 0xEE, 0x7B, 0x94, 0xA1, 0x2A, 0x57, 0x70, 0x5D, 0x26, 0x73, 0x0C, 0x59,
         0xE2, 0xCF, 0x68, 0x95, 0x5E, 0x6B, 0x84, 0x11, 0x9A, 0x47, 0x60, 0xCD, 0x96, 0x63, 0xFC, 0xC9,
         0x52, 0xBF, 0x58, 0x05, 0xCE, 0x5B, 0x74, 0x81, 0x0A, 0x37, 0x50, 0x3D, 0x06, 0x53, 0xEC, 0x39,
         0xC2, 0xAF, 0x48, 0x75, 0x3E, 0x4B, 0x64, 0xF1, 0x7A, 0x27, 0x40, 0xAD, 0x76, 0x43, 0xDC, 0xA9,
         0x32, 0x9F, 0x38, 0xE5, 0xAE, 0x3B, 0x54, 0x61, 0xEA, 0x17, 0x30, 0x1D, 0xE6, 0x33, 0xCC, 0x19,
         0xA2, 0x8F, 0x28, 0x55, 0x1E, 0x2B, 0x44, 0xD1, 0x5A, 0x07, 0x20, 0x8D, 0x56, 0x23, 0xBC, 0x89,
         0x12, 0x7F, 0x18, 0xC5, 0x8E, 0x1B, 0x34, 0x41, 0xCA, 0xF7, 0x10, 0xFD, 0xC6, 0x13, 0xAC, 0xF9,
         0x82, 0x6F, 0x08, 0x35, 0xFE, 0x0B, 0x24, 0xB1, 0x3A, 0xE7, 0x00, 0x6D, 0x36, 0x03, 0x9C, 0x69,
         0xF2, 0x5F, 0xF8, 0xA5, 0x6E, 0xFB, 0x14, 0x21, 0xAA, 0xD7, 0xF0, 0xDD, 0xA6, 0xF3, 0x8C, 0xD9
   ]

   def decrypt(bytes, %Crypto{}=c) do
      {key_bytes1, key_bytes2} = case c.using_alt do
            true  -> {c.key3, c.key4}
            false -> {@key1, @key2}
      end

      {new_in, dec} =                         
      bytes
      |> :binary.bin_to_list
      |> Enum.reduce({c.in_counter,<<>>}, fn byte, {in_counter, b} ->
            key_byte1 = Enum.at(key_bytes1, (band in_counter, 0xFF))
            key_byte2 = Enum.at(key_bytes2, (bsr in_counter, 8))

            newByte   = bxor byte, 0xAB
            d = bsr(band(newByte, 0xFF), 4)
            |> bor(bsl(band(newByte, 0xFF), 4))
            |> bxor(bxor(key_byte2, key_byte1))

            { rem((in_counter+1), @maxCounter), b <> <<d>> }
      end )

      {dec, %{c | in_counter: new_in} }
end

def encrypt(bytes, %Crypto{}=c) do
      {new_out, enc} =  
      bytes
      |> :binary.bin_to_list
      |> Enum.reduce({c.out_counter,<<>>}, fn byte, {out_counter, b} ->
            key_byte1 = Enum.at(@key1, (band out_counter, 0xFF))
            key_byte2 = Enum.at(@key2, (bsr out_counter, 8))

            newByte   = bxor byte, 0xAB
            d = bsr(band(newByte, 0xFF), 4)
            |> bor(bsl(band(newByte, 0xFF), 4))
            |> bxor(bxor(key_byte2, key_byte1))

            { rem((out_counter+1), @maxCounter), b <> <<d>> }
      end )

      {enc, %{c | out_counter: new_out} }
end



def set_keys(token, uid, %Crypto{}=current) do
      dword_key = bxor(token + uid, 0x4321) |> bxor(token)
      imul = dword_key * dword_key

      xor_key = [
            dword_key,
            dword_key |> bsr(8),
            dword_key |> bsr(16),
            dword_key |> bsr(24),
            imul,
            imul |> bsr(8),
            imul |> bsr(16),
            imul |> bsr(24) 
            ] |> Enum.map(&(&1 |> band(0xFF))) 

            zipped = 0..255
            |> Enum.map(fn idx ->
                 {
                     Enum.at(xor_key, rem(idx, 4))   |> bxor(Enum.at(@key1, idx)),
                     Enum.at(xor_key, rem(idx, 4)+4) |> bxor(Enum.at(@key2, idx))
               }
         end)
            |> List.zip

            key3 = zipped |> Enum.at(0) |> Tuple.to_list
            key4 = zipped |> Enum.at(1) |> Tuple.to_list
            
            %Crypto{ in_counter: current.in_counter, 
            out_counter: 0,
            using_alt: true, key3: key3, key4: key4}
      end

end



























